Networking 
-------------
Linux Networking basics
--> Switching and Routing
    1. Switching
    2. Routing
    3. Default Gateway
  DNS
    1. DNS Configurations on linux
    2. CoreDNS introduction
    3. Network Namespaces
    4. Docker Networking

Switching: 

etho A --------->  etho B
ip link            ip link
ip addr add 192.168.1.10/24 dev etho -> A
ip addr add 192.168.1.10/24 dev etho -> B
ip route add 192.168.2.0/24 via 192.168.1.1
ip route add default viq 192.168.2.1

A--> 192.168.2.5 
B--> 192.168.1.6 and 192.168.2.6
C --> 192.168.2.5

ping 192.168.2.5--network is unreachable

--> ip route add 192.168.2.0/24 via 192.168.1.6
--> ip route add 192.168.1.0/24 via 192.168.2.6
--------------------------------------------------------------------------------
DNS:
------------
Record Types:
A records: A Record is used to point a logical domain name, such as "google.com".

AAAA record: is another type of DNS Record that points a domain or subdomain to an IPv6 address.

CNAME record: A canonical Name or CNAME record is a type of DNS record that maps an alias name to a true or canonical domain name.---mapping

to test dns resloution:
nslookup
dig 

------------------------------
Network NameSpaces:

Create Network NS:
--> ip nets add red
--> ip nets add blue
--> ip nets

Exec In Network NS:
--> ip link
--> ip netns exec red ip link
--> ip -n red link
--> arp
--> ip netns exec red arp 
--> route
--> ip netns exec red route
--> ip link add veth-red type veth peer name veth-blue
--> ip link set veth-red netns red
--> ip link set veth-blue netns blue
--> ip -n red addr add "ip-address" dev veth-red
--> ip -n blue addr add "ip-address" dev veth-blue
--> ip -n red link set veth-red up
--> ip -n blue link set veth-blue up
--> ip netns exec red ping ip
--> ip netns exec red arp
--> ip netns exec blue arp
--> arp

Linux Bridge:
--> ip link add c-net-o type bridge
--> ip link
--> ip link set dev v-net-0 up
--> ip -n red link del veth-red
--> ip link add veth-red type eth peer name veth-red-br
--> ip link add veht-blue type veth peer name veth-blue-br
--> ip link set veth-red netns red
--> ip link set veth-red-br master v-net-0
--> ip link set veth-blue netns blue
--> ip link set veth-blue-br master v-net-0
--> ip -n red addr add "ip-add" dev veth-red
--> ip -n blue addr add "ip-add" dev veth-blue
--> ip -n red link set veth-red up
--> ip -n blue link set veth-blue up
--> ip addr add ip/24 dev v-net-0
--> ping ip
--> ip netns exec blue ping ip
--> ip netns exec blue route
--> ip netns exec blue ip route add "ip/24 via "ip"

--> iptables -t nat -A POSTROUTING -s 192.168.15.0/2 j MASQUERADE   
--> ip netns exec blue ping ip
port forwarding:
iptables -t nat -A PREROUTING --dport 80 --to-destination ip:80 -j DNAT

While testing the Network Namespaces, if you come across issues where you can't ping one namespace from the other, make sure you set the NETMASK while setting IP Address. ie: 192.168.1.10/24

--> ip -n red addr add 192.168.1.10/24 dev veth-red

Another thing to check is FirewallD/IP Table rules. Either add rules to IP Tables to allow traffic from one namespace to another. Or disable IP Tables all together (Only in a learning environment).

-----------------------
Docker Networking:
1. NONE network:
--> Docker run --network none nginx

2. Host Network:
--> docker run --network host nginx
http://192.168.1.10:80

3. Bridge Network:
--> docker network ls
--> ip link add docker0 type bridge

to list name space
--> ip netns

iptables \
-t nat \
-A PREROUTING \
-j DNAT \
--dport 8080 \
--to-destination 80

--> iptables -nvL -t nat
----------------------------------
container networking Interface(CNI):

network Namespaces
1. create network Namespace
2. Create Bridge Network/Interface
3. create VETH pairs (pipe, virtual Cable)
4. Attach Other vEth to Namespace
5. Attach Other vEth to Bridge
6. Assign IP Addresses
7. Bring the interfaces up
8. Enable NAT - IP Masquerade

Docker
1. create network Namespace
2. Create Bridge Network/Interface
3. create VETH pairs (pipe, virtual Cable)
4. attach vEth to Namespace
5. Attach Other vEth to Bridge
6. Assign IP addresses
7. Bring the interfaces up
8. Enable NAT - IP Masquerade

--> bridge add <cid> <namespace>

Container Network Interface:
--> Container Runtime must create network namespace
--> Identify network the container must attach to
--> Container Runtime to invoke Network Plugin (bridge) when container is ADDed.
--> Container Runtime to invoke Network Plugin (bridge) when container is DEleted
--> JSON format of the Network Configuration.

--> Must support command line arguments ADD/DEL/CHECK
--> Must support parameters container id, network ns.
--> Must manage IP address assignment to PODs.
--> must Return results in a specific format.

--> docker run --network=none nginx
--> bridge add "id" /var/run/netns/id
--------------------------------------------------------------------
Cluster Networking:
--> cat /etc/network/interfaces

--> netstat -natulp | grep kube-scheduler
--> netstat -natulp | grep | grep LISTEN
-------------------------------------------
pod Networking:

net-script.sh
ADD)
#create veth pair
#Attach veth pair
#Assign veth pair
#Bring up Interface
ip -n <namespace> link set
DEl)

# Delete veth pair
ip link del 
--cni-conf-dir=/etc/cni/net.d
--cni-bin-dir=/etc/cni/bin
./net-script.sh add <container> <namespace>
-----------------------------------
container Networking Interface(CNI):

--> view kubelet option:
--> ls /etc/cni/net.d
--> cat /etc/cni/net,d/10-bridge.conf
--------------------------------------
CNI Weave:
--> ls /opt/cni/bin
--> cd /etc/cni/net.d/
-------
IP Addresses Management --Weave:
--> cat /etc/cni/net.d/net-script.conf
--> cd /etc/cni/net.d/
--> kubectl get pods -n kube-system -o wide | grep weave
--> ip addr show weave
--> kubectl run busybox --image=busybox --command sleep 1000 --dry-run=client -o yaml > pod.yaml

--> kubectl exec -ti busybox -- sh

------------------------------------------------
Service networking:
ClusterIP:
--> kube-api-server --service-cluster-ip-range ipNet (default: 10.0.0.0/24)
--> ps aux | grep kube-api-server
--> iptables -L -t nat | grep db-service
--> cat /var/log/kube=proxy.log
---------------------------------------
Cluster DNS:
------------
CoreDNS in kubernetes:
--> kube-dns

--> cat /etc/coredns/corefile
--> kubectl get configmap -n kube-system
--> cat /var/lib/kubelet/config.yaml
--> kubectl -n kube-system get svc
--> kubectl describe deployment coredns -n kube-system
------------------------------------------------------------------------------
Ingress: 
reverse proxy to deploy:
--> nginx 
--> haproxy
--> traefik

ingress-wear-watch.yaml
apiVersion: extensions/v1betal
kind: ingress
metadata:
  name: ingress-wear-watch
spec:

  rules:
  - host: wear.my-online-store.com
    http:
      paths:
      - backend:
          serviceName: waer-service
          servicePort: 80
  - host: watch.my-online-store.com
    http:
      paths:
      - backend:
          serviceName: watch-service
          servicePort: 80 
          
 --> kubectl -n app-space describe ingress ingress-wear-watch
--> kubectl -n app-space get ingress ingress-wear-watch -o yaml > ingress.yaml
--> kubectl get deployment.apps,svc -n app-space
--> kubectl get deployments.apps --all-namespaces

----------------------------------------------------------------------------------------------------------------------------------
Article: Ingress

As we already discussed Ingress in our previous lecture. Here is an update.

In this article, we will see what changes have been made in previous and current versions in Ingress.

Like in apiVersion, serviceName and servicePort 

apiVersion: extensions/v1betal
kind: ingress
metadata:
  name: ingress-wear-watch
spec:

  rules:
  - host: wear.my-online-store.com
    http:
      paths:
      - path: /wear
      - backend:
          serviceName: waer-service
          servicePort: 80
  - path: /watch
   - backend:
        serviceName: watch-service
        servicePort: 80
        
in k8s version 1.20+ we can create an Ingress resource from the imperative way like this:-

Format - kubectl create ingress <ingress-name> --rule="host/path=service:port"

Example - kubectl create ingress ingress-test --rule="wear.my-online-store.com/wear*=wear-service:80"

Find more information and examples in the below reference link:-

https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-em-ingress-em-

References:-

https://kubernetes.io/docs/concepts/services-networking/ingress

https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types

------------------------------------------------------------
Ingress - Annotations and rewrite-target

Our watch app displays the video streaming webpage at http://<watch-service>:<port>/

Our wear app displays the apparel webpage at http://<wear-service>:<port>/

Note that the /watch and /wear URL path are what we configure on the ingress controller so we can forwarded users to the appropriate application in the backend. 
The applications don't have this URL/Path configured on them:

http://<ingress-service>:<ingress-port>/watch --> http://<watch-service>:<port>/

http://<ingress-service>:<ingress-port>/wear --> http://<wear-service>:<port>/

Without the rewrite-target option, this is what would happen:

http://<ingress-service>:<ingress-port>/watch --> http://<watch-service>:<port>/watch

http://<ingress-service>:<ingress-port>/wear --> http://<wear-service>:<port>/wear


Notice watch and wear at the end of the target URLs. The target applications are not configured with /watch or /wear paths.
They are different applications built specifically for their purpose, so they don't expect /watch or /wear in the URLs. 
And as such the requests would fail and throw a 404 not found error.

To fix that we want to "ReWrite" the URL when the request is passed on to the watch or wear applications. 
We don't want to pass in the same path that user typed in. So we specify the rewrite-target option. 
This rewrites the URL by replacing whatever is under rules->http->paths->path which happens to be /pay in this case with the value in rewrite-target. 
This works just like a search and replace function.

For example: replace(path, rewrite-target)
In our case: replace("/path","/")

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test-ingress
  namespace: critical-space
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /pay
        backend:
          serviceName: pay-service
          servicePort: 8282
In another example given here, this could also be:

replace("/something(/|$)(.*)", "/$2")

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: rewrite
  namespace: default
spec:
  rules:
  - host: rewrite.bar.com
    http:
      paths:
      - backend:
          serviceName: http-svc
          servicePort: 80
        path: /something(/|$)(.*)

 -- ----------------------------------------------------
 --> kubectl create ns ingress-space
--> kubectl create cm nginx-configuration -n ingress-space
--> kubectl create sa ingress-serviceaccount -n ingress-space
--> kubectl -n ingress get roles
--> kubectl apply -f ingress-controller.yaml
--> kubectl -n ingress-space expose deployment ingress-controller --name ingress --port 80 --target-port 80 --type NodePort --dry-run=client -o yaml > ingress-svc.yaml
--> kubcetl apply -f ingress-svc.yaml
--> kubectl -n ingress-space-svc.yaml
--> kubectl -n ingress-space get svc
--> kubectl -n app-space describe ingress test-ingress

























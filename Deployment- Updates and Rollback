Application Lifecycle Management:
-----------------
Deployment- Updates and Rollback:

--> Rollout and versioning:
Rollout Command:
--> kubectl rollout status deployment/myapp-deployment
--> kubectl rollout history deployment/myapp-deployment


apiVersion: apps/v1
kind: Deployment
metadata:
 name: myapp-deployment
 labels:
     app: myapp
     type: front-end
spec:
  template:
    metadata:
     name: myapp-pod
     labels:
        app: myapp
        type: front-end
     spec:
       containers:
       - name: nginx-container
         image: nginx:1.7.1

  replicas: 3
  selector:
     matchLabels:
        type: front-end

--> kubectl apply -f deployment-definition.yml
--> kubectl set image deployment/myapp-deployment \ nginx=nginx:1.9.1
--> kubectl rollout undo deployment/myapp-deployment
--> kubectl get replicasets

Summarize commands:
1. create: kubectl create -f deployment-definition.yml
2. Get: kubectl get deployments --to list
3. Update: kubectl apply -f deployment-definition.yml
           kubectl set image deployment/myapp-deployment nginx=nginx:1.9.1
           kubectl rollout status deployment/myapp-deployment
           kubectl rollout history deployment/myapp-deployment
           kubectl rollout undo deployment/myapp-deployment


--> test-practice commands
--> kubectl get rs
--------------------
Application commands:
commands and arguments:

apiVersion: v1
kind: pod
metadata:
  name: ubuntu-sleeper-pod
spec:
 containers:
   - name: ubuntu-sleeper
     image: ubuntu-sleeper
     commands:["sleep2.0"]
     args: ["10']
     
--> docker run --name ubuntu-sleeper ubuntu-sleeper
--> docker run --name ubuntu-sleeper ubuntu-sleeper 10
--> kubectl create -f ubuntu-sleeper.yml
Configure Environment varibales in Application

apiVersion: v1
kind: pod
metadata:
  name: Simple-webapp-color
spec:
  containers"
  - name: simple-webapp-color
    image: simple-webapp-color
    ports:
      - containerPort: 8080
    env:
      - name: APP_COLOR
        value: pink

-> docker run -e APP_COLOR=pink simple-webapp-color

ENV value Types

1. Plain key value
   env:
     - name: APP_COLOR
       value: pink
2. ConfigMap
  env:
    - name: APP_COLOR
      valueFrom:
          configMapKeyRef:
3. Secrets:
   env:
     - name: APP_COLOR
       ValueFrom:
          secretKeyRef:

Configuring ConfigMaps in application:
config-map.yml

apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  APP_COLOR: blue
  APP_MODE: prod

-> kubectl create -f config-map.yml
-> kubectl get configmaps
-> kubectl decribe configmaps

apiVersion: v1
kind: pod
metadata:
  name: simple-webapp-color
  labels:
    name: simple-webapp-color
spec:
  containers:
  - name: simple-webapp-color
    image: simple-webapp-color
    ports:
      - containerPort: 8080
    envFrom:
      - configMapRef:
            name: app-config

--> ConfigMap in pods:

1. ENV:
envFrom:
   - configMapRef:
         name: app-config

2. Single ENV:
  env:
     - name: APP_COLOR
       valueFrom:
         configMapKeyRef:
           name: app-config
           key: APP_COLOR
3. Volume:
volume:
- name: app-conifg-volume
  configMap:
    name: app-config

--> kubectl get pod webapp-color -o yaml > pod.yaml
--> kubectl delete pod webapp-color
--> kubectl get cm
--> kubectl create cm webapp-color --from-literal=APP_COLOR=darkblue
--> kubectl create cm webapp-config-map --from-lteral=APP_COLOR=darkblue
--> kubectl explain pods --recursive | grep envFrom -A3

-----------------------------------------------
Kubernetes Secrets:

to Create Secrets
DB_Host:mysql
DB_User
DB_Password: passwrd

-> kubectl create secret generic 
-> kubectl create secret generic \

to Encode Secrets:
--> echo -n 'mysql' | base64
--> echo -n 'root' | base64
--> echo -n 'passwrd' base64

--> kubectl get secrets
--> kubectl describe secrets
--> kubectl get secret app-secret -o yaml

Decode Secrets:
--> ehco -n 'code' | base64 --decode
--> echo -n 'code' | base64 --decode
--> echo -n 'code' | base64 --decode

secret-data.yaml
apiVersion: v1
kind: Secret
metadata: 
   name: app-secret
data:
   DB_Host:mysql
   DB_User
   DB_Password: passwrd

apiVersion: v1
kind: pod
metadata:
  name: simple-webapp-color
  labels:
    name: simple-webapp-color
spec:
  containers:
  - name: simple-webapp-color
    image: simple-webapp-color
    ports:
      - containerPort: 8080
    envFrom:
      - secretRef:
            name: app-secret


--> kubectl create -f pod-definition.yaml

Secrets in pods:

1. Env:

envFrom:
  - secretRef:
        name: app-config

2. SINGLE ENV:
env:
  - name: DB_Password
    valueFrom:
      secretKeyRef:
        name: app-secret
        key; DB_Password

3. VOLUME:
volumes:
- name: app-secret-volume
  secret:
     secretName: app-secret

-> ls /opt/app-secret-volumes
-> cat /opt/app-secret-volumes/DB_Password

--> kubectl get secrets
--> kubectl secribe secrets default-token
--> kubcetl create secret generic db-secret --from-literal=DB_HOST=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123
--> kubectl describe secrets db-secret
--> kubectl get pod webapp-pod -o yaml > pod.yaml
--> kubectl delete po webapp-pod
--> kubectl explain pods --recursive | less
--> kubectl explain pods --recursive | grep -AB envFrom

----------------------------------
apiVersion: v1
kind: pod
metadata:
  labels:
    name: webapp-pod
  namespace: default
spec:
  containers:
  - image: kodekloud/simple-webapp-mysql
    imagePull{olicy: Always
    name: webapp
    envFrom:
    - secretRef:
        name: db-secret

--> kubectl apply -f pod.yaml
-------------------
Kubernetes Multi-container Pods:
--> kubectl run yellow --image=busybox --restart=Never --dry-run -o yaml > pod.yaml

apiVersion: v1
kind: pod
metadata:
  creationTimestamp: null
  labels:
    run: yellow
  name: yellow
spec:
  containers:
  - image: busybox
    name: lemon
  - image: redis
    name: gold


--> kubectl apply -f pod.yaml
--> kubectl describe pod yellow
--> kubectl get ns
--> kubectl -n elastic-stack get pod,svc
--> kubectl -n elastic-stack logs app
--> kubectl -n elastic-stack get pod app -o yaml > app.yaml
--> kubectl delete pod app -n elastic-stack
------------------------
InitContainers:

In a multi-container pod, each container is expected to run a process that stays alive as long as the POD's lifecycle. For example in the multi-container pod that we talked about earlier that has a web application and logging agent, both the containers are expected to stay alive at all times. The process running in the log agent container is expected to stay alive as long as the web application is running. If any of them fails, the POD restarts.

But at times you may want to run a process that runs to completion in a container. For example a process that pulls a code or binary from a repository that will be used by the main web application. That is a task that will be run only  one time when the pod is first created. Or a process that waits  for an external service or database to be up before the actual application starts. That's where initContainers comes in.

An initContainer is configured in a pod like all other containers, except that it is specified inside a initContainers section,  like this:

apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox
    command: ['sh', '-c', 'git clone <some-repository-that-will-be-used-by-application> ; done;']

When a POD is first created the initContainer is run, and the process in the initContainer must run to a completion before the real container hosting the 
application starts. You can configure multiple such initContainers as well, like how we did for multi-pod containers. In that case each init container is run 
one at a time in sequential order. If any of the initContainers fail to complete, Kubernetes restarts the Pod repeatedly until the Init Container succeeds.
--------------------------------------------------------------------------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
  - name: init-mydb
    image: busybox:1.28
    command: ['sh', '-c', 'until nslookup mydb; do echo waiting for mydb; sleep 2; done;']

--------------------------------------------






















